---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files: "{{ file }}"
  vars:
    login: &login
      hostname: "{{ cluster_ip }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  tasks:
  - name: Change Timezone
    na_ontap_cluster:
      state: present
      timezone: {name: "{{ timezone }}"}
      <<: *login

  - name: Add NTP Server
    ignore_errors: yes
    na_ontap_ntp:
      state: present
      server_name: "{{ ntp }}"
      <<: *login

  - name: Setup DNS
    na_ontap_dns:
      state: present
      vserver: "{{ item.vserver }}"
      domains: "{{ item.dns_domains }}"
      nameservers: "{{ item.dns_nameservers }}"
      skip_validation: "true"
      <<: *login
    with_items:
      "{{ dns }}"
    when: dns != None
  
  - name: install certificate
    na_ontap_security_certificates:
      common_name: "{{ item.common_name }}"
      name: "{{ item.name }}"
      public_certificate: "{{lookup('file', ca_cert_filepath)}}"
      type: "{{ item.type }}"
      svm: "{{ item.vserver }}"
      <<: *login
    with_items:
      "{{ sslCertificate }}"
    when: sslCertificate != None

  - name: Create Cifs Server
    na_ontap_cifs_server:
      state: present
      name: "{{ item.cifs_server_name }}"
      vserver: "{{ item.vserver }}"
      use_start_tls: "{{ item.use_start_tls }}"
      domain: "{{ item.domain }}"
      admin_user_name: "{{ item.admin_user }}"
      admin_password: "{{ item.admin_password }}"
      ou: "{{ item.ou }}"
      <<: *login
    with_items:
      "{{ cifsServer }}"
    when: cifsServer != None

  - name: Create Domain Tunnel
    na_ontap_domain_tunnel:
      state: present
      vserver: "{{ domain_tunnel_vserver }}"
      <<: *login

  - name: Add member to CIFS local group
    na_ontap_cifs_local_group_member:
      state: present
      vserver: "{{ item.vserver }}"
      group: "{{ item.group }}" 
      member: "{{ item.member }}" 
      <<: *login
    with_items:
      "{{ cifsMembers }}"
    when: cifsMembers != None

  - name: Modify Snapshot policy with multiple schedules
    na_ontap_snapshot_policy:
      state: present
      name: "{{ item.policy }}"
      schedule: "{{ item.schedule }}" 
      count: "{{ item.count }}" 
      snapmirror_label: "{{ item.snapmirror_label }}" 
      enabled: True
      <<: *login
    with_items:
      "{{ snapshotPolicy }}"
    when: snapshotPolicy != None

  - name: Enable autosupport
    na_ontap_autosupport:
      state: present
      node_name: "{{ item.node_name }}"
      transport: "{{ item.transport }}"
      noteto: "{{ item.noteto }}"
      mail_hosts: "{{ item.mail_hosts }}"
      support: true
      <<: *login
    with_items:
      "{{ autoSupport }}"
    when: autoSupport != None

  - name: create nfs configuration
    na_ontap_nfs:
      state: present
      vserver: "{{ item.vserver }}"
      nfsv3: "{{ item.nfsv3 }}"
      nfsv4: "{{ item.nfsv4 }}"
      nfsv41: "{{ item.nfsv41 }}"
      vstorage_state: "{{ item.vstorage }}"
      <<: *login
    with_items:
      "{{ nfs }}"
    when: nfs != None


  - name: Create log forward configuration
    ignore_errors: yes
    na_ontap_log_forward:
      state: present
      destination: "{{ log_forward.destination }}"
      port: "{{ log_forward.port }}" 
      protocol: "{{ log_forward.protocol }}" 
      facility: "{{ log_forward.facility }}"
      <<: *login

  - name: Limit Info Gathering net inteface
    netapp.ontap.na_ontap_info:
      gather_subset: "net_interface_info"
      <<: *login
      vserver: Cluster
    register: net_interface_info
    tags: test
  
  - name: debug nte_inteface_info
    debug:
      var: net_interface_info
    tags: test
  